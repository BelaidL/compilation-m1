# 1 "src/hopix/hopixLexer.mll"
 
  open Lexing
  open Error
  open Position
  open HopixParser

  let next_line_and f lexbuf  =
    Lexing.new_line lexbuf;
    f lexbuf

  let error lexbuf =
    error "during lexing" (lex_join lexbuf.lex_start_p lexbuf.lex_curr_p)



# 18 "src/hopix/hopixLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\240\255\241\255\242\255\244\255\245\255\027\000\000\000\
    \000\000\000\000\000\000\251\255\001\000\003\000\002\000\005\000\
    \255\255\253\255\252\255\001\000\250\255\249\255\002\000\000\000\
    \248\255\000\000\005\000\247\255\102\000\037\000\252\255\253\255\
    \036\000\004\000\255\255\254\255\003\000\254\255\255\255\007\000\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\015\000\015\000\
    \015\000\015\000\015\000\255\255\015\000\012\000\001\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\009\000\255\255\255\255\255\255\
    \002\000\002\000\255\255\255\255\255\255\255\255\255\255\000\000\
    ";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\031\000\000\000\000\000\
    \255\255\255\255\000\000\000\000\038\000\000\000\000\000\255\255\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\014\000\016\000\014\000\014\000\015\000\014\000\016\000\
    \039\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \014\000\000\000\014\000\000\000\000\000\000\000\000\000\006\000\
    \000\000\000\000\005\000\004\000\000\000\013\000\018\000\003\000\
    \017\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\032\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\000\000\000\000\000\000\007\000\021\000\023\000\
    \022\000\009\000\027\000\000\000\025\000\020\000\024\000\000\000\
    \000\000\000\000\000\000\026\000\008\000\000\000\010\000\000\000\
    \000\000\000\000\000\000\012\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \033\000\035\000\000\000\000\000\000\000\000\000\000\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\000\000\000\000\000\000\000\000\028\000\000\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\037\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\030\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\014\000\000\000\000\000\014\000\015\000\
    \036\000\039\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\014\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\000\000\255\255\000\000\012\000\000\000\
    \013\000\033\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\029\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\010\000\255\255\255\255\255\255\000\000\009\000\022\000\
    \008\000\000\000\026\000\255\255\007\000\019\000\023\000\255\255\
    \255\255\255\255\255\255\025\000\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \029\000\032\000\255\255\255\255\255\255\255\255\255\255\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\255\255\255\255\255\255\255\255\028\000\255\255\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\036\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\029\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 49 "src/hopix/hopixLexer.mll"
                    ( next_line_and token lexbuf )
# 154 "src/hopix/hopixLexer.ml"

  | 1 ->
# 50 "src/hopix/hopixLexer.mll"
                    ( token lexbuf               )
# 159 "src/hopix/hopixLexer.ml"

  | 2 ->
# 51 "src/hopix/hopixLexer.mll"
                    ( comment_line lexbuf )
# 164 "src/hopix/hopixLexer.ml"

  | 3 ->
# 52 "src/hopix/hopixLexer.mll"
                    ( comment_block 0 lexbuf )
# 169 "src/hopix/hopixLexer.ml"

  | 4 ->
# 56 "src/hopix/hopixLexer.mll"
              ( EQUAL )
# 174 "src/hopix/hopixLexer.ml"

  | 5 ->
# 59 "src/hopix/hopixLexer.mll"
                    ( VAL   )
# 179 "src/hopix/hopixLexer.ml"

  | 6 ->
# 60 "src/hopix/hopixLexer.mll"
                    ( IF    )
# 184 "src/hopix/hopixLexer.ml"

  | 7 ->
# 61 "src/hopix/hopixLexer.mll"
                    ( THEN  )
# 189 "src/hopix/hopixLexer.ml"

  | 8 ->
# 62 "src/hopix/hopixLexer.mll"
                    ( ELSE  )
# 194 "src/hopix/hopixLexer.ml"

  | 9 ->
let
# 65 "src/hopix/hopixLexer.mll"
                     i
# 200 "src/hopix/hopixLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 65 "src/hopix/hopixLexer.mll"
                        ( Type_Var i)
# 204 "src/hopix/hopixLexer.ml"

  | 10 ->
# 68 "src/hopix/hopixLexer.mll"
              ( STAR  )
# 209 "src/hopix/hopixLexer.ml"

  | 11 ->
# 69 "src/hopix/hopixLexer.mll"
              ( PLUS  )
# 214 "src/hopix/hopixLexer.ml"

  | 12 ->
# 70 "src/hopix/hopixLexer.mll"
              ( MINUS )
# 219 "src/hopix/hopixLexer.ml"

  | 13 ->
# 71 "src/hopix/hopixLexer.mll"
              ( SLASH )
# 224 "src/hopix/hopixLexer.ml"

  | 14 ->
# 74 "src/hopix/hopixLexer.mll"
                    ( EOF       )
# 229 "src/hopix/hopixLexer.ml"

  | 15 ->
# 77 "src/hopix/hopixLexer.mll"
                    ( error lexbuf "unexpected character." )
# 234 "src/hopix/hopixLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment_block lvl lexbuf =
    __ocaml_lex_comment_block_rec lvl lexbuf 29
and __ocaml_lex_comment_block_rec lvl lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 81 "src/hopix/hopixLexer.mll"
          ( comment_block (lvl + 1) lexbuf       )
# 245 "src/hopix/hopixLexer.ml"

  | 1 ->
# 82 "src/hopix/hopixLexer.mll"
          ( 
            if lvl = 0
            then  token lexbuf
            else comment_block (lvl - 1) lexbuf
                                            )
# 254 "src/hopix/hopixLexer.ml"

  | 2 ->
# 87 "src/hopix/hopixLexer.mll"
          ( comment_block lvl lexbuf)
# 259 "src/hopix/hopixLexer.ml"

  | 3 ->
# 88 "src/hopix/hopixLexer.mll"
          ( error lexbuf "comment unclosed" )
# 264 "src/hopix/hopixLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_block_rec lvl lexbuf __ocaml_lex_state

and comment_line lexbuf =
    __ocaml_lex_comment_line_rec lexbuf 36
and __ocaml_lex_comment_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 92 "src/hopix/hopixLexer.mll"
                  ( comment_line  lexbuf)
# 275 "src/hopix/hopixLexer.ml"

  | 1 ->
# 93 "src/hopix/hopixLexer.mll"
                  ( token lexbuf )
# 280 "src/hopix/hopixLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_line_rec lexbuf __ocaml_lex_state

;;

